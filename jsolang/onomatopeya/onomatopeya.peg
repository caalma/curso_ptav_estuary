##JSoLang onomatopeya

{
    let dat = {
    	'soni':[[]],
        'ritm':[[]],
        'fxiz':[[]],
        'fxde':[[]],
    };

    let fx_izquierda = {};

    let fx_derecha = {
	'h!': 'silence',
    };

    let silenciar_todo = false;

    let ritmo = { 'aum': [0], 'dis': [0] };
    const rit_a = () => { ritmo['aum'][capa_actual] += 1 },
	  rit_d = () => { ritmo['dis'][capa_actual] += 1 };

    let paneo = { 'izq': [0], 'der': [0] };
    const pan_i = () => { paneo['izq'][capa_actual] += 0.1 },
	  pan_d = () => { paneo['der'][capa_actual] += 0.1 };

    let volumen = { 'aum': [0], 'dis': [0] };
    const vol_a = () => { volumen['aum'][capa_actual] += 0.1 },
	  vol_d = () => { volumen['dis'][capa_actual] += 0.1 };

    const agr = (v, g) => { dat[g][capa_actual].push(v) };

    let capa_actual = 0;
    const nueva_capa = () => {
        ['soni', 'ritm', 'fxiz', 'fxde'].map((k)=>{ dat[k].push([]) });
        ['aum', 'dis'].map((k)=>{ ritmo[k].push(0) });
        ['izq', 'der'].map((k)=>{ paneo[k].push(0) });
        ['aum', 'dis'].map((k)=>{ volumen[k].push(0) });
        capa_actual += 1
    }

    const generar_capa = (ic) => {
	let r_soni = [],
            r_fxiz = [],
            r_fxde = [],
	    r_ritm = 1 + ritmo['aum'][ic] - ritmo['dis'][ic],
	    r_paneo = (0.5 + paneo['der'][ic] -  paneo['izq'][ic]).toFixed(2),
	    r_volumen = (1 + volumen['aum'][ic] - volumen['dis'][ic]).toFixed(2),
	    i = '',
	    p, n, m, ui, ud;

	for(i in dat['soni'][ic]){
	    p = dat['soni'][ic][i][0];
            p = p === '=' ? '~' : p.toLowerCase();
	    n = dat['soni'][ic][i][1];
    	    n = n.length == 0 ? '' : ':' + n;
            m = dat['soni'][ic][i][2];
    	    m = m.length == 0 ? '' : '*' + m;
	    r_soni.push(p + n + m);
	}

	if(dat['fxiz'][ic].length === 0){
    	    r_fxiz = [];
	}else{
 	    for(i in dat['fxiz'][ic]){
      		p = dat['fxiz'][ic][i];
		if( p.startsWith('/')){
        	    p = p.replace('/', 'fast ')
		}else if ( p.startsWith('*')){
		    p = p.replace('*', 'slow ')
		}
       		r_fxiz.push(p);
	    }
	}

	if(dat['fxde'][ic].length === 0){
    	    r_fxde = [];
	}else{
 	    for(i in dat['fxde'][ic]){
      		p = dat['fxde'][ic][i].toLowerCase();
       		r_fxde.push(fx_derecha[p]);
	    }
	}

	r_fxde.push(`pan (${r_paneo})`);
	r_fxde.push(`gain (${r_volumen})`);

	ui = r_fxiz.length === 0 ? '' : ' $ ';
	ud = r_fxde.length === 0 ? '' : ' # ';

	return 	r_fxiz.join(' $ ')
    	    + ui
            + 's "['
            + r_soni.join(' ')
            + ']*' + r_ritm +'"'
            + ud
            + r_fxde.join(' # ')
        ;
    }

    const resultado = () => {
    	let capas = [],
	    st = silenciar_todo ? ' # silence' : '',
	    lenguaje = '##minitidal\n',
            i = 0;

        for(i; i <= capa_actual; i++){
            capas.push(generar_capa(i))
        }

	return lenguaje
            + 'stack['
            + capas.join(',')
            + ']'
            + st;
    }
}


capa = (frase / ritmo / fxizq / fxder
       / paneo / volumen / sep_capa
       / silenciar_todo / ignorar )*
       { return resultado() }

frase = m:(entero*)s:( silencio / sonido )n:(entero*)
        { agr([s, n, m], 'soni') }

sonido = 'aahh'i / 'arg'i / 'auu'i / 'baaa'i / 'bbbddd'i / 'beep'i / 'biiubiuu'i / 'biukbuik'i
         / 'blublu'i / 'braam'i / 'bruubrr'i / 'chuinn'i / 'chukun'i / 'clik'i / 'cocoococoo'i
         / 'crack'i / 'crash'i / 'crish'i / 'cuak'i / 'dindundin'i / 'fiui'i / 'fuifuifuii'i
         / 'fuuhh'i / 'gluglu'i / 'gruar'i / 'grugrr'i / 'guauguau'i / 'guiin'i / 'hiiee'i
         / 'iaaaa'i / 'inkoon'i / 'iuiuiuiu'i / 'iuueu'i / 'ja'i / 'je'i / 'jiik'i / 'jojujujuju'i
         / 'kash'i / 'oh'i / 'oink'i / 'pashh'i / 'piopi'i / 'pop'i / 'prrrprrr'i / 'punch'i
         / 'punn'i / 'shaa'i / 'shii'i / 'shsh'i / 'snrrrss'i / 'srisisi'i / 'tak'i / 'tang'i
         / 'tictac'i / 'tilintilin'i / 'tinb'i / 'tink'i / 'tinkunbin'i / 'tinsh'i / 'tirariru'i
         / 'tiruriruin'i / 'tling'i / 'tomtom'i / 'tonb'i / 'tonk'i / 'toomm'i / 'trikint'i
         / 'tritiing'i / 'triuuii'i / 'trraass'i / 'trritrri'i / 'trtrtrtr'i / 'tuk'i / 'tulinnn'i
         / 'turip'i / 'tuum'i / 'uiiuuu'i / 'uops'i / 'uow'i / 'yuayua'i / 'zick'i / 'zizizizi'i

silencio = '='

ritmo = (rit_aum / rit_dis)
rit_aum = s:'+' { return rit_a() }
rit_dis = s:'-' { return rit_d() }

fxizq = s:( m_dur ) { agr(s, 'fxiz') }

m_dur = s:(s_dur entero) { return s.join('') }
s_dur = ('/' / '*')

fxder = s:('H!'i ) { agr(s, 'fxde')}

volumen = (vol_aum / vol_dis)
vol_aum = s:')' { return vol_a() }
vol_dis = s:'(' { return vol_d() }

paneo = (pan_izq / pan_der)
pan_izq = s:'<' { return pan_i() }
pan_der = s:'>' { return pan_d() }

silenciar_todo = s:('0!'i ) { silenciar_todo = true }

sep_capa = '.' { nueva_capa() }

comentado = ('_'[^ .]) { return '' }
otras_cosas = .
ignorar = '\n' / comentado / otras_cosas { return '' }
entero = n:[0-9]+ { return n.join('') }
