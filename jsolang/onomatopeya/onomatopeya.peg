##JSoLang onomatopeya

{
    // variables y funciones de entorno

    var dat = {'inst':[], 'ritm':[], 'fxizq':[], 'fxder':[]};
    var ritmos = {
	'lento': 1,
	'rapido': 1,
	'normal': 1
    };

    var fx_izquierda = {
	'/2': 'slow 3 $',
	'*2': 'fast 3 $',
    };

    var fx_derecha = {
	'h!': 'silence',
    };

    var ritmo = {'aum': 0, 'dis': 0};
    var rit_a = function (){ ritmo['aum'] += 1; }
    var rit_d = function (){ ritmo['dis'] += 1; }

    var paneo = {'izq': 0, 'der': 0};
    var pan_i = function (){ paneo['izq'] += 0.2; }
    var pan_d = function (){ paneo['der'] += 0.2; }

    var volumen = {'aum': 0, 'dis': 0};
    var vol_a = function (){ volumen['aum'] += 0.2; }
    var vol_d = function (){ volumen['dis'] += 0.2; }

    var agr = function(v, g){
	dat[g].push(v)
    }

    var res = function(){
	var r_inst = [],
            r_fxizq = [],
            r_fxder = [];
	var r_ritm = '';
	var p, n, m, i = '';
	for(i in dat['inst']){
	    p = dat['inst'][i][0].toLowerCase();
        p = p === '=' ? '~' : p;
	    n = dat['inst'][i][1];
    	n = n.length == 0 ? '' : ':' + n;
        m = dat['inst'][i][2];
    	m = m.length == 0 ? '' : '*' + m;
	    r_inst.push(p + n + m);
	}

	var r_ritm = 1 + ritmo['aum'] - ritmo['dis'];

	if(dat['fxizq'].length === 0){
    	    r_fxizq = [];
	}else{
 	    for(i in dat['fxizq']){
      		p = dat['fxizq'][i];
		if( p.startsWith('/')){
        	p = p.replace('/', 'fast ')
		}else if ( p.startsWith('*')){
		    p = p.replace('*', 'slow ')
		}
       		r_fxizq.push(p);
	    }
	}

	if(dat['fxder'].length === 0){
    	    r_fxder = [];
	}else{
 	    for(i in dat['fxder']){
      		p = dat['fxder'][i].toLowerCase();
       		r_fxder.push(fx_derecha[p]);
	    }
	}
	r_fxder.push('pan ('+ (paneo['der'] -  paneo['izq']).toFixed(2) + ')');
	r_fxder.push('gain ('+ (1 + volumen['aum'] - volumen['dis']).toFixed(2) + ')');

    var u_i = r_fxizq.length === 0 ? '' : ' $ ';
    var u_d = r_fxder.length === 0 ? '' : ' # ';


	return '##miniTidal\n'
            + r_fxizq.join(' $ ')
    	    + u_i
            + 's "['
            + r_inst.join(' ')
            + ']*' + r_ritm +'"'
            + u_d
            + r_fxder.join(' # ')
        ;
    }
}

// reglas de lenguaje

composicion = capa { return res() }

capa = (frase / ritmo / fxizq / fxder / paneo / volumen
	       / ignorar)*

frase = m:(entero*)s:( silencio / sonido )n:(entero*)
              { agr([s, n, m], 'inst') }

sonido = 'aahh'i / 'arg'i / 'auu'i / 'baaa'i / 'bbbddd'i / 'beep'i / 'biiubiuu'i / 'biukbuik'i
         / 'blublu'i / 'braam'i / 'bruubrr'i / 'chuinn'i / 'chukun'i / 'clik'i / 'cocoococoo'i
         / 'crack'i / 'crash'i / 'crish'i / 'cuak'i / 'dindundin'i / 'fiui'i / 'fuifuifuii'i
         / 'fuuhh'i / 'gluglu'i / 'gruar'i / 'grugrr'i / 'guauguau'i / 'guiin'i / 'hiiee'i
         / 'iaaaa'i / 'inkoon'i / 'iuiuiuiu'i / 'iuueu'i / 'ja'i / 'je'i / 'jiik'i / 'jojujujuju'i
         / 'kash'i / 'oh'i / 'oink'i / 'pashh'i / 'piopi'i / 'pop'i / 'prrrprrr'i / 'punch'i
         / 'punn'i / 'shaa'i / 'shii'i / 'shsh'i / 'snrrrss'i / 'srisisi'i / 'tak'i / 'tang'i
         / 'tictac'i / 'tilintilin'i / 'tinb'i / 'tink'i / 'tinkunbin'i / 'tinsh'i / 'tirariru'i
         / 'tiruriruin'i / 'tling'i / 'tomtom'i / 'tonb'i / 'tonk'i / 'toomm'i / 'trikint'i
         / 'tritiing'i / 'triuuii'i / 'trraass'i / 'trritrri'i / 'trtrtrtr'i / 'tuk'i / 'tulinnn'i
         / 'turip'i / 'tuum'i / 'uiiuuu'i / 'uops'i / 'uow'i / 'yuayua'i / 'zick'i / 'zizizizi'i

silencio = '='

ritmo = (rit_aum / rit_dis)
rit_aum = s:'+' { return rit_a() }
rit_dis = s:'-' { return rit_d() }

fxizq = s:( m_dur )
{ agr(s, 'fxizq') }

m_dur = s:(s_dur entero) { return s.join('') }
s_dur = ('/' / '*')

fxder = s:('H!'i )
{ agr(s, 'fxder')}

volumen = (vol_aum / vol_dis)
vol_aum = s:')' { return vol_a() }
vol_dis = s:'(' { return vol_d() }

paneo = (pan_izq / pan_der)
pan_izq = s:'<' { return pan_i() }
pan_der = s:'>' { return pan_d() }

//sep_capa = '.' { return '' }

comentado = ('_'[^ .]) { return '' }
otras_cosas = .
ignorar = '\n' / comentado / otras_cosas { return '' }
entero = n:[0-9]+ { return n.join('') }
